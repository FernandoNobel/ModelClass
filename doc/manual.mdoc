---
title: ModelClass User Manual
author: Fernando NÃ³bel Santos Navarro (fersann1@upv.es)
date: \today
toc: true
---

# Manual version

This manual was written for the version **0.4.1** of ModelClass. Please check your local version of ModelClass using the following command:
```MATLAB
ModelClass.version()
```
, then if your local version does not match, please upgrade to the latest version in the GitHub repository.

# Introduction to ModelClass

ModelClass is a MATLAB class which simplifies working with ODE models. The main objetive is to simplify the process of coding and simulating an ODE model, and therefore reducing the time spent in this task. With ModelClass one can program ODE models from the symbolic equations and then simulate directly. This class provides also some functionality like OpenModelica (i.e. extendable classes, simulation of DAE models, etc).

Apart from that, ModelClass provides us more classes for different tasks. For example, there is a class for mathematical analysis that can calculate equilibrium points, linearize the model, and calculate eigenvalues from the model defined in ModelClass. On other hand, there is class for a contractivity test to check whether a model is contractive or no.

Lastly it is even possible to define ModelClass models from chemical reactions directly and then perform QSSA analysis and simulate.

For more information please contact *fersann1@upv.es*.

# Extends

The keyword `extends` allows us to create new ModelClass models that extends the functionality of a base class.

When we use the keyword `extends` with the filename of a base model, the parser of the ModelClass will read all the data in the base model and it will add it to the model which we are working on. So it can be understood as pasting all the data from the base model to the new one.

This way we can reuse model for building new models that expand the original functionality, and it a change is made in the original model, it will be also done in the extended models. This helps the maintenance of the models and reduces the time spent programming.

## Usage

When defining a ModelClass `.mc`, we can use the following structure for extending a base model:

```MATLAB
extends /path/to/filename.mc;
```

, where `/path/to/filename.mc` it the path with the name of the model we want to extend (it is possible to use a relative path or a absolute path). For example:

This command will extend the file `model.mc` present in the working directory.
```MATLAB
extends ./model.mc;
```

This command will extend the file `model.mc` present in the parent directory of the working directory.
```MATLAB
extends ../model.mc;
```

This command will extend the file `model.mc` present in the path `/home/user/MATLAB/`.
```MATLAB
extends /home/username/MATLAB/model.m;
```

NOTE: It is best to declare the `extends` at the beginning of the ModelClass model.

## Example

In `./examples/ex1_extends` there is a example code for using the `extends` keyword.

The example starts with a `baseModel.mc` and we would like to expand its functionality by adding a equation to show the reference dynamically.

The `baseModel.mc` defines the following variables and equations:

```MATLAB
@[](../examples/ex1_extends/baseModel.mc)
```

And the `extendeModel.mc` is defines the variable and equation needed for the reference:

```MATLAB
@[](../examples/ex1_extends/extendedModel.mc)
```

Notice how the equation for the reference `ref == k3/d3` makes use of parameters previously defined in the `baseModel.mc`. The extended model has access to all the information defined in the base model.

Then if we execute the following command:

```MATLAB
m = loadModelClass('extendedModel');
```

, the file `extendedModel.m` is autogenerated, and it will contain all the model information defined by `baseModel.mc` and `extendedModel.mc`. Here is shown the contents of `extendedModel.m`:

```MATLAB
@[](../examples/ex1_extends/extendedModel.m)
```

, where we can confirm that the base model has been successfully extended.

Finally, at this point we can work as usually with the model `extendedModel.mc`, and we could even extended it to create a `extendedExtendedModel.md`!
